{"version":3,"sources":["components/Editor.js","App.js","reportWebVitals.js","index.js"],"names":["Editor","props","language","displayName","value","onChange","useState","open","setOpen","className","class","type","onClick","icon","faCompressAlt","faExpandAlt","onBeforeChange","editor","data","options","lineWrapping","lint","mode","theme","lineNumbers","App","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","useEffect","timeout","setTimeout","clearTimeout","title","sandbox","frameBorder","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAUe,SAASA,EAAOC,GAC3B,IAAOC,EAAwCD,EAAxCC,SAAUC,EAA8BF,EAA9BE,YAAaC,EAAiBH,EAAjBG,MAAOC,EAAUJ,EAAVI,SACrC,EAAuBC,oBAAS,GAAhC,mBAAOC,EAAP,KAAaC,EAAb,KAMA,OACI,sBAAKC,UAAS,2BAAuBF,EAAM,GAAG,aAA9C,UACI,sBAAKG,MAAM,eAAX,UACKP,EACD,wBACAQ,KAAK,SACLF,UAAU,sBACVG,QAAS,kBAAIJ,GAASD,IAHtB,SAII,cAAC,IAAD,CAAiBM,KAAMN,EAAOO,IAAgBC,WAGtD,cAAC,aAAD,CACAC,eAhBR,SAAsBC,EAAQC,EAAMd,GAChCC,EAASD,IAgBLA,MAAOA,EACPK,UAAU,sBACVU,QAAS,CACLC,cAAc,EACdC,MAAK,EACLC,KAAMpB,EACNqB,MAAM,WACNC,aAAY,QCoBbC,MAvDf,WACE,MAAuBnB,mBAAS,eAAhC,mBAAOoB,EAAP,KAAaC,EAAb,KACA,EAAqBrB,mBAAS,6CAA9B,mBAAOsB,EAAP,KAAYC,EAAZ,KACA,EAAmBvB,mBAAS,0CAA5B,mBAAOwB,EAAP,KAAWC,EAAX,KACA,EAA0BzB,mBAAS,IAAnC,mBAAM0B,EAAN,KAAcC,EAAd,KAeA,OAbAC,qBAAU,WACR,IAAMC,EAASC,YAAW,WACxBH,EAAU,qCAAD,OAEGP,EAFH,qCAGIE,EAHJ,uCAIKE,EAJL,+CAOT,KACF,OAAO,kBAAKO,aAAaF,MACzB,CAACT,EAAKE,EAAIE,IAGV,qCACA,sBAAKrB,UAAU,gBAAf,UACE,cAACT,EAAD,CACEE,SAAS,MACTC,YAAY,OACZC,MAAOsB,EACPrB,SAAUsB,IAEZ,cAAC3B,EAAD,CACEE,SAAS,MACTC,YAAY,MACZC,MAAOwB,EACPvB,SAAUwB,IAEZ,cAAC7B,EAAD,CACEE,SAAS,aACTC,YAAY,KACZC,MAAO0B,EACPzB,SAAU0B,OAGd,qBAAKtB,UAAU,OAAf,SACE,wBACEuB,OAAQA,EACRM,MAAM,SACNC,QAAQ,gBACRC,YAAY,IACZC,MAAM,OACNC,OAAO,eCvCAC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bbab9087.chunk.js","sourcesContent":["import React,{useState} from \"react\";\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/theme/material.css';\r\nimport 'codemirror/mode/xml/xml';\r\nimport 'codemirror/mode/javascript/javascript';\r\nimport 'codemirror/mode/css/css';\r\nimport { Controlled as ControlledEditor} from \"react-codemirror2\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCompressAlt, faExpandAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default function Editor(props){\r\n    const {language, displayName, value, onChange}=props;\r\n    const [open, setOpen]= useState(true);\r\n\r\n    function handleChange(editor, data, value){\r\n        onChange(value);\r\n    }\r\n\r\n    return(\r\n        <div className={`editor-container ${ open ?'':'collapsed'}`}>\r\n            <div class=\"editor-title\">\r\n                {displayName}\r\n                <button\r\n                type=\"button\"\r\n                className=\"expand-collapse-btn\"\r\n                onClick={()=>setOpen(!open)}>\r\n                    <FontAwesomeIcon icon={open ? faCompressAlt : faExpandAlt} />\r\n                </button>\r\n            </div>\r\n            <ControlledEditor\r\n            onBeforeChange={handleChange}\r\n            value={value}\r\n            className=\"code-mirror-wrapper\"\r\n            options={{\r\n                lineWrapping: true,\r\n                lint:true,\r\n                mode: language,\r\n                theme:'material',\r\n                lineNumbers:true\r\n            }}\r\n            />\r\n        </div>\r\n    )\r\n}","import React,{useState, useEffect} from \"react\";\nimport Editor from \"./components/Editor\";\n\nfunction App() {\n  const [html, setHtml]= useState('Hello World');\n  const [css, setCss]= useState('body{\\nfont-size:100px;\\ncolor: white;\\n}');\n  const [js, setJs]= useState('document.body.style.background=\"blue\";');\n  const[srcDoc, setSrcDoc]= useState('')\n\n  useEffect(()=>{\n    const timeout= setTimeout(()=>{\n      setSrcDoc(`\n        <html>\n          <body>${html}</body>\n          <style>${css}</style>\n          <script>${js}</script>\n        </html>     \n      `)\n    },250)\n    return ()=> clearTimeout(timeout)\n  },[html,css,js])\n\n  return (\n    <>\n    <div className=\"pane top-pane\">\n      <Editor \n        language=\"xml\" \n        displayName=\"Html\"\n        value={html}\n        onChange={setHtml}\n        />\n      <Editor \n        language=\"css\" \n        displayName=\"CSS\"\n        value={css}\n        onChange={setCss}\n        />\n      <Editor \n        language=\"javascript\" \n        displayName=\"JS\"\n        value={js}\n        onChange={setJs}\n        />\n    </div>\n    <div className=\"pane\">\n      <iframe\n        srcDoc={srcDoc}\n        title=\"output\"\n        sandbox=\"allow-scripts\"\n        frameBorder=\"0\"\n        width=\"100%\"\n        height=\"100%\"\n        />\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}